Buffer {
    int8 *beginning;
    size_t start;
    size_t end;
}

len = end - start;
cap = 10 >> 20;
[-,-,z,k,a,1,2,y,y,y] = 10

start = 1
end = 5

[-,y,z,k,k];
[-,y,z,k,k,-,-,-];
[y,z,k,k,-,-,-,-];

if len + 1> cap || end >= cap :
    // resize and start from the beginning
    memcpy(new, arr[start], len);
    end = len;

[z,k,a,1,2,y,y,y, ...] = 20

=====================================

value type
primitive => string, int, nil, boolean
complex => array, struct (?)

string => [type(1 byte), nlength(4 byte), content(n byte)]
int => [type(1 byte), content(8 byte)]
nil => [type(1 byte)]
boolean => [type(1 byte), content(1 byte)]

array => [type(1 byte), nlength(4 byte), content(n byte)]
struct => ?

string => Entry => HNode
